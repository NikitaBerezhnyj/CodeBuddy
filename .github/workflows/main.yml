name: Build and Release Code Buddy Sidekick Extension

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install vsce
        run: npm install -g vsce

      - name: Get version and name from package.json
        id: get_meta
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build VSIX
        run: |
          npm run package
          echo "Built file: ${{ steps.get_meta.outputs.NAME }}-${{ steps.get_meta.outputs.VERSION }}.vsix"

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-buddy-sidekick
          path: ./${{ steps.get_meta.outputs.NAME }}-${{ steps.get_meta.outputs.VERSION }}.vsix

  release:
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: code-buddy-sidekick
          path: ./artifacts

      - name: Get version and name from package.json
        id: get_meta
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename VSIX for release
        run: |
          mv ./artifacts/${{ steps.get_meta.outputs.NAME }}-${{ steps.get_meta.outputs.VERSION }}.vsix ./artifacts/${{ steps.get_meta.outputs.NAME }}.vsix

      - name: Create tag if not exists
        run: |
          VERSION=${{ steps.get_meta.outputs.VERSION }}
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
          else
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git tag -a "v$VERSION" -m "Release v$VERSION"
            git push origin "v$VERSION"
          fi

      - name: Create GitHub Release and upload file
        run: |
          VERSION=${{ steps.get_meta.outputs.VERSION }}
          gh release create "v$VERSION" ./artifacts/${{ steps.get_meta.outputs.NAME }}.vsix \
            --title "Code Buddy Sidekick v$VERSION" \
            --notes "Automated VS Code extension release"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install vsce
        run: npm install -g vsce

      - name: Publish to VS Code Marketplace
        run: |
          vsce publish --packagePath ./artifacts/${{ steps.get_meta.outputs.NAME }}.vsix --pat $VSCE_PAT
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
